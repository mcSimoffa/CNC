PROC MPS_PRES(REAL M_DISTS,REAL M_OFSR,REAL M_OFSL,REAL M_TOLR,REAL M_TOLL,INT M_DIR)

;**********************************************
;*   CICLO DI PRESET CON TASTATORE            *
;*  SIEMENS 840D/828D VER 4.2    31/01/2014
;**********************************************

DEF REAL L_UT,R_UT,T_ACTIVE,D_ACTIVE
DEF REAL MEMORY_POS_1,NEW_DIMENSION,M_SAFETY
DEF REAL P_1,P_2,P_3,P_4,P_A,P_B,P_R,P_L

;**********************************************

;*****CONTROLLI PIU' START*********************
MPS_INI
MAR_UTR=0
M57
G4F2.
M58
M=(MAR_TASTA_ON)
G4 F0.5
;**********************************************
G94
;***********CARICAMENTO ORIGINI****************
AVVIO:

;**********************************************

;***********LETTURA DATI UTENSILE**************
T_ACTIVE=$P_TOOLNO
D_ACTIVE=$P_TOOL
L_UT=$TC_DP3[$P_TOOLNO,$P_TOOL]
R_UT=$TC_DP6[$P_TOOLNO,$P_TOOL]
STOPRE
IF M_TOLL==0
  L_UT=MAR_MAXL
ENDIF
IF M_TOLR==0 
  R_UT=MAR_MAXR
ENDIF
IF R_UT==0 
  R_UT=MAR_MAXR
ENDIF
IF MAR_TOOLDATA==0
L_UT=$TC_DP3[$P_TOOLNO,$P_TOOL]
R_UT=$TC_DP6[$P_TOOLNO,$P_TOOL]
IF L_UT<MAR_MINL GOTOF ALARM6
IF L_UT>MAR_MAXL GOTOF ALARM6
IF R_UT>MAR_MAXR GOTOF ALARM7
ENDIF
D0       ;ANNULLAMENTO UTENSILE
STOPRE
;**********************************************

;*******PREELABORAZIONE DATI INIZIALI**********

P_A=(MAR_LATO/2)+R_UT+MAR_C
P_B=MAR_PROBE_R

IF MAR_PROBE_L<>0
IF M_TOLL==0
  P_R=MAR_PROBE_L-MAR_DIR_L*(L_UT+MAR_C)
  P_L=MAR_PROBE_L-MAR_DIR_L*(MAR_MINL-MAR_C)
  M_SAFETY=MAR_PROBE_L-MAR_DIR_L*(L_UT+MAR_SAFETY)
ELSE
  P_R=MAR_PROBE_L-MAR_DIR_L*(L_UT+M_DISTS)
  P_L=MAR_PROBE_L-MAR_DIR_L*(L_UT-M_DISTS)
  M_SAFETY=MAR_PROBE_L-MAR_DIR_L*(L_UT+MAR_SAFETY)
ENDIF
ENDIF

IF MAR_PROBE_L==0
IF M_TOLL==0
  P_R=L_UT-MAR_DIR_L*MAR_C
  P_L=MAR_MINL+MAR_DIR_L*MAR_C
  M_SAFETY=L_UT-MAR_DIR_L*MAR_SAFETY
ELSE
  P_R=L_UT-MAR_DIR_L*M_DISTS
  P_L=L_UT+MAR_DIR_L*M_DISTS
  M_SAFETY=L_UT-MAR_DIR_L*MAR_SAFETY
ENDIF
ENDIF

;**********************************************

;****POSIZIONAMENTO ASSI PER CAL LUNGHEZZA*****
STOPRE
MPS_MOVE(MAR_AXIS_L,0)
SUPA G1 MEAS=MAR_INPUT G60 AX[MAR_AXIS_R]=MAR_PROBE_R-MAR_DIR_R*M_OFSR AX[MAR_AXIS_P]=MAR_PROBE_P F=MAR_RAPIDO
MPS_MOVE(MAR_AXIS_L,M_SAFETY)
;MPS_MOVE(MAR_AXIS_R,MAR_PROBE_R-MAR_DIR_R*M_OFSR)
;MPS_MOVE(MAR_AXIS_P,MAR_PROBE_P)
STOPRE
IF $AC_MEA[ABS(MAR_INPUT)]==0 GOTOF GOON ;controllo se tocco avvenuto
M5
D=D_ACTIVE
STOPRE
MPS_ALM(5) ;Tocco inaspettato
GOON:

MPS_MOVE(MAR_AXIS_L,P_R)

;****CALCOLO RPM, FEED1, FEED2*****
;MAR_RPM=1000*MAR_VT/(2*3.1416*R_UT)
MAR_FEED1=120
MAR_FEED2=15
;IF MAR_RPM>400
MAR_RPM=400
;ENDIF
IF M_OFSR==0
;MAR_RPM=1000*MAR_VT/(2*3.1416*MAR_MAXR)
MAR_FEED1=120/MAR_MM_INCH
MAR_FEED2=15/MAR_MM_INCH
ENDIF

;**********************************************
IF MAR_TOOLDATA==1
MPS_TCH(MAR_AXIS_L,MAR_DIR_L,MAR_FEED1*8.3333,P_L)

ENDIF
IF M_OFSR<>0
S=(MAR_RPM) M=(M_DIR)
G4 F1
ENDIF
;***************INIZIO TOCCHI L****************
MPS_TCH(MAR_AXIS_L,MAR_DIR_L,MAR_FEED1,P_L)
M57
G4F2.
M58
MPS_TCH(MAR_AXIS_L,MAR_DIR_L,MAR_FEED2,P_L)
MEMORY_POS_1=MAR_POS
STOPRE
;**********************************************

;***ELABORAZIONE DATI RILEVATI PER LUNGHEZZA***
ELAB:
IF MAR_PROBE_L<>0
NEW_DIMENSION=ABS(MAR_MEAS_L-MEMORY_POS_1)
ELSE
NEW_DIMENSION=MEMORY_POS_1
ENDIF

STOPRE
IF M_TOLL==0 GOTOF SCRIVI
  IF ABS(NEW_DIMENSION-L_UT)>M_TOLL
     IF MAR_STOP==1
        MAR_UTR=1
     ELSE
        GOTOF ALARM2
     ENDIF
  ELSE
     $TC_DP12[T_ACTIVE,D_ACTIVE]=NEW_DIMENSION-L_UT
  ENDIF
 GOTOF RAGGIO
SCRIVI:
 $TC_DP3[T_ACTIVE,D_ACTIVE]=NEW_DIMENSION
 $TC_DP12[T_ACTIVE,D_ACTIVE]=0

;**********************************************

;****POSIZIONAMENTO ASSI PER CAL RAGGIO********
RAGGIO:
IF M_OFSL==0 GOTOF END
L_UT=NEW_DIMENSION

IF MAR_PROBE_L<>0
M_OFSL=MAR_PROBE_L-MAR_DIR_L*(L_UT-M_OFSL)
ELSE
M_OFSL=L_UT+MAR_DIR_L*M_OFSL
ENDIF


;MAR_RPM=1000*MAR_VT/(2*3.1416*R_UT)
MAR_FEED1=120
MAR_FEED2=15
;IF MAR_RPM>400
MAR_RPM=400
;ENDIF

IF M_OFSR==0
S=(MAR_RPM) M=(M_DIR)
G4 F1
ENDIF


MPS_MOVE(MAR_AXIS_R,MAR_PROBE_R-MAR_DIR_R*P_A)
MPS_MOVE(MAR_AXIS_L,M_OFSL)

;**********************************************


;***************INIZIO TOCCHI R****************
MPS_TCH(MAR_AXIS_R,MAR_DIR_R,MAR_FEED1*2,P_B)
M57
G4F2.
M58
MPS_TCH(MAR_AXIS_R,MAR_DIR_R,MAR_FEED2,P_B)
MEMORY_POS_1=MAR_POS
STOPRE

;MPS_MOVE(MAR_AXIS_L,P_R)
;**********************************************

;****ELABORAZIONE DATI RILEVATI PER DIAMETRO***
ELAB:
NEW_DIMENSION=ABS(MAR_MEAS_R-MEMORY_POS_1)-(MAR_LATO/2)
STOPRE
IF M_TOLR==0 GOTOF SCRIVO
  IF ABS(NEW_DIMENSION-R_UT)>M_TOLR
     IF MAR_STOP==1
        MAR_UTR=1
     ELSE
        GOTOF ALARM3
     ENDIF
  ELSE
     $TC_DP15[T_ACTIVE,D_ACTIVE]=NEW_DIMENSION-R_UT
  ENDIF
  GOTOF END
SCRIVO:
$TC_DP6[T_ACTIVE,D_ACTIVE]=ABS(NEW_DIMENSION)
$TC_DP15[T_ACTIVE,D_ACTIVE]=0
GOTOF END

;**********************************************

ALARM2: ;LUNGHEZZA FUORI TOLLERANZA
SUPA G1 AX[MAR_AXIS_L]=MAR_PROBE_L-MAR_DIR_L*(MAR_SAFETY+L_UT)  F=MAR_RAPIDO
M5 G90
D=D_ACTIVE
STOPRE
MPS_ALM(2)
ALARM3: ;RAGGIO FUORI TOLLERANZA
SUPA G1 AX[MAR_AXIS_L]=MAR_PROBE_L-MAR_DIR_L*(MAR_SAFETY+L_UT)  F=MAR_RAPIDO
M5 G90
D=D_ACTIVE
STOPRE
MPS_ALM(3)
ALARM4: ;NUMERO GIRI TROPPO ELEVATO
SUPA G1 AX[MAR_AXIS_L]=MAR_PROBE_L-MAR_DIR_L*(MAR_SAFETY+L_UT)  F=MAR_RAPIDO
M5 G90
D=D_ACTIVE
STOPRE
MPS_ALM(4)
ALARM6: ;LUNGHEZZA IN TABELLA NON CORRETTA
SUPA G1 AX[MAR_AXIS_L]=MAR_PROBE_L-MAR_DIR_L*(MAR_SAFETY+L_UT)  F=MAR_RAPIDO
M5 G90
D=D_ACTIVE
STOPRE
MPS_ALM(6)
ALARM7: ;RAGGIO IN TABELLA NON CORRETTA
SUPA G1 AX[MAR_AXIS_L]=MAR_PROBE_L-MAR_DIR_L*(MAR_SAFETY+L_UT)  F=MAR_RAPIDO
M5 G90
D=D_ACTIVE
STOPRE
MPS_ALM(7)
END:
SUPA G1 AX[MAR_AXIS_L]=MAR_PROBE_L-MAR_DIR_L*(MAR_SAFETY+L_UT)  F=MAR_RAPIDO
M5 G90
M=(MAR_TASTA_OFF)
D=D_ACTIVE
M17
